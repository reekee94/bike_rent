{"ast":null,"code":"export default class ApiService {\n  constructor() {\n    this._apiBase = 'http://localhost:5000';\n\n    this.getResource = async url => {\n      const res = await fetch(`${this._apiBase}${url}`);\n\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${url}` + `, received ${res.status}`);\n      }\n\n      return await res.json();\n    };\n\n    this.deleteData = async url => {\n      const res = await fetch(`${this._apiBase}${url}`, {\n        method: 'DELETE'\n      });\n\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${url} +\n                , received ${res.status}`);\n      }\n\n      return await res.json();\n    };\n\n    this.postData = async (url, data) => {\n      const res = await fetch(`${this._apiBase}${url}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${url}` + `, received ${res.status}`);\n      }\n\n      return await res.json();\n    };\n\n    this.getAllBikes = async () => {\n      const res = await this.getResource(`/bike/`);\n      return res;\n    };\n\n    this.getBike = async id => {\n      const res = await this.getResource(`/bike/${id}/`);\n      return res;\n    };\n\n    this.postBike = async data => {\n      const res = await this.postData(`/bike/`, data);\n      return res;\n    };\n\n    this.deleteBike = async id => {\n      const res = await this.deleteData(`/bike/${id}/`);\n      return res;\n    };\n  }\n\n}\n;","map":{"version":3,"sources":["C:/Users/reeke/WebstormProjects/bikes/client/src/services/api-service.js"],"names":["ApiService","_apiBase","getResource","url","res","fetch","ok","Error","status","json","deleteData","method","postData","data","headers","body","JSON","stringify","getAllBikes","getBike","id","postBike","deleteBike"],"mappings":"AAAA,eAAe,MAAMA,UAAN,CAAiB;AAAA;AAAA,SAE5BC,QAF4B,GAEjB,uBAFiB;;AAAA,SAI5BC,WAJ4B,GAId,MAAOC,GAAP,IAAe;AACzB,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKJ,QAAS,GAAEE,GAAI,EAAxB,CAAvB;;AAEA,UAAI,CAACC,GAAG,CAACE,EAAT,EAAa;AACT,cAAM,IAAIC,KAAJ,CAAW,mBAAkBJ,GAAI,EAAvB,GACX,cAAaC,GAAG,CAACI,MAAO,EADvB,CAAN;AAEH;;AACD,aAAO,MAAMJ,GAAG,CAACK,IAAJ,EAAb;AACH,KAZ2B;;AAAA,SAc5BC,UAd4B,GAcf,MAAOP,GAAP,IAAe;AACxB,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKJ,QAAS,GAAEE,GAAI,EAAxB,EAA2B;AAC9CQ,QAAAA,MAAM,EAAE;AADsC,OAA3B,CAAvB;;AAGA,UAAI,CAACP,GAAG,CAACE,EAAT,EAAa;AACT,cAAM,IAAIC,KAAJ,CAAW,mBAAkBJ,GAAI;6BACtBC,GAAG,CAACI,MAAO,EADtB,CAAN;AAEH;;AACD,aAAO,MAAMJ,GAAG,CAACK,IAAJ,EAAb;AACH,KAvB2B;;AAAA,SAyB5BG,QAzB4B,GAyBjB,OAAOT,GAAP,EAAYU,IAAZ,KAAqB;AAC5B,YAAMT,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKJ,QAAS,GAAEE,GAAI,EAAxB,EAA2B;AAC9CQ,QAAAA,MAAM,EAAE,MADsC;AAE9CG,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFqC;AAK9CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf;AALwC,OAA3B,CAAvB;;AAOA,UAAI,CAACT,GAAG,CAACE,EAAT,EAAa;AACT,cAAM,IAAIC,KAAJ,CAAW,mBAAkBJ,GAAI,EAAvB,GACX,cAAaC,GAAG,CAACI,MAAO,EADvB,CAAN;AAEH;;AACD,aAAO,MAAMJ,GAAG,CAACK,IAAJ,EAAb;AACH,KAtC2B;;AAAA,SAwC5BS,WAxC4B,GAwCd,YAAY;AACtB,YAAMd,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAkB,QAAlB,CAAlB;AACA,aAAOE,GAAP;AACH,KA3C2B;;AAAA,SA6C5Be,OA7C4B,GA6ClB,MAAOC,EAAP,IAAc;AACpB,YAAMhB,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAkB,SAAQkB,EAAG,GAA7B,CAAlB;AACA,aAAOhB,GAAP;AACH,KAhD2B;;AAAA,SAkD5BiB,QAlD4B,GAkDjB,MAAOR,IAAP,IAAgB;AACvB,YAAMT,GAAG,GAAG,MAAM,KAAKQ,QAAL,CAAe,QAAf,EAAwBC,IAAxB,CAAlB;AACA,aAAOT,GAAP;AACH,KArD2B;;AAAA,SAuD5BkB,UAvD4B,GAuDf,MAAOF,EAAP,IAAc;AACvB,YAAMhB,GAAG,GAAG,MAAM,KAAKM,UAAL,CAAiB,SAAQU,EAAG,GAA5B,CAAlB;AACA,aAAOhB,GAAP;AACH,KA1D2B;AAAA;;AAAA;AA2D/B","sourcesContent":["export default class ApiService {\r\n\r\n    _apiBase = 'http://localhost:5000';\r\n\r\n    getResource = async (url) => {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}` +\r\n                `, received ${res.status}`)\r\n        }\r\n        return await res.json();\r\n    };\r\n\r\n    deleteData = async (url) => {\r\n        const res = await fetch(`${this._apiBase}${url}`, {\r\n            method: 'DELETE'\r\n        });\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url} +\r\n                , received ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    postData = async (url, data) => {\r\n        const res = await fetch(`${this._apiBase}${url}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}` +\r\n                `, received ${res.status}`)\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    getAllBikes = async () => {\r\n        const res = await this.getResource(`/bike/`);\r\n        return res;\r\n    };\r\n\r\n    getBike = async (id) => {\r\n        const res = await this.getResource(`/bike/${id}/`);\r\n        return res\r\n    };\r\n\r\n    postBike = async (data) => {\r\n        const res = await this.postData(`/bike/`, data);\r\n        return res\r\n    };\r\n\r\n    deleteBike = async (id) => {\r\n        const res = await this.deleteData(`/bike/${id}/`);\r\n        return res\r\n    };\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}